<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on W4ngch3n&#39;s Blog</title>
    <link>https://wxy665996.github.io/blog/</link>
    <description>Recent content in Blog on W4ngch3n&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wxy665996.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>美赛赛前的一些准备和注意事项</title>
      <link>https://wxy665996.github.io/blog/before_mcm/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wxy665996.github.io/blog/before_mcm/</guid>
      <description> 论文结构：  Summary Restatement of the Problem ( Introduction ) Assumptions Justification of Our Approach The Model  1 2 3 &amp;hellip;&amp;hellip;  Testing the Model Results Strengths and Weaknesses References  注意事项：  摘要  不超过一页，提交时作为参赛论文的首页 赛题重述与阐明 模型设计及合理性论证 模型测试情况及灵敏度分析 优缺点讨论  引言（Introduction）  第一句话最重要，以及第一段落应浅显易懂 用自己语言重述赛题，明确解题目标 澄清原题中可能出现的模糊概念  论文主体  假设条件与解释： 明确列出所有用到的假设条件，并解释其合理性 模型设计 系列模型：逐步完善推导出最终模型  结论（Conclusions）  描述模型的测试方法和所得到的结果 敏感性分析和稳定性测试 可讨论某些参数值的轻微变化对模型及结论产生的影响 明确指出模型缺陷，以及如何改进和修补 明确指出，假如有充足的时间和计算资源，我们将能够解决哪些问题   </description>
    </item>
    
    <item>
      <title>豌豆杯CTF的部分题目Writeup</title>
      <link>https://wxy665996.github.io/blog/wandouctf_wp/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wxy665996.github.io/blog/wandouctf_wp/</guid>
      <description>WEB 1.WEB签到题 签到题很简单，进入网页，F12，在源码里找到flag。
2.输入密码查看flag 先打开burpsuite，然后在网页输入框中随便输入一串数字，由于题目提示密码是五位纯数字，直接在burpsuite里面load五位纯数字的字典进行爆破，得到密码拿到flag。
3.这真能传马？ 用weevely生成一个带有秘钥的jpg文件，然后将文件上传上去，上传成功，提示告诉我们要访问的文件夹的具体目录，用weevely通过刚才的秘钥访问该目录，访问成功，然后ls找到flag文件拿到flag。
4.这真能注入？ sqlmap一把嗦
Crypto 1.我这密码忘了。。。 两次base64解码就ok。
2.二战时期的密码 看到这么长（眼熟）这么长（眼熟）这么长（眼熟）的一串二进制，第一想法就是与、或、异或一波，发现密文的二进制位数和给的秘钥的二进制位数一样，就没啥说的直接算吧，最后异或的结果再转字符就拿到了flag。
3.被黑了，求密码 摩斯电码解码拿到flag。
4.出航了～出航啦！！ wireshark，用http.request.method==POST对数据包进行过滤，最后发现只有一个POST请求，具体看看包中的内容后发现有pswrd，对paswrd的值进行base64解码拿到flag。
5.IDC密码破解（未解出） 打开下载的文件，是一串字符串js6163633181327481
后来比赛结束做出来的人告诉我们这是手机九键。。。ORZ
最后 附上队长dalao的wp链接：点这里
最后的最后 接触ctf的时间说不上早也说不上晚，但是感觉自己进步的速度特别慢，大概是因为之前一直没写过博客吧，过一段时间看看坚持下来写博客会有哪些进步吧，啊啊啊给自己加油！！！</description>
    </item>
    
    <item>
      <title>用Hugo和Github搭建个人博客</title>
      <link>https://wxy665996.github.io/blog/my-first-blog/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wxy665996.github.io/blog/my-first-blog/</guid>
      <description>Hugo配合GitHub搭建博客(Win 10) 前序 以前从来没写过博客，更别说自己徒手搭一个博客了，博主是一个懒得不能再懒的文笔烂到不行的理科生，但是为了养成一个及时整理自己学到的知识和资料的好习惯，赶鸭子上架，现学现卖。
协会部门的大多数人们都用了Wordpress或者Hexo+Github搭建的博客，我不知道脑子抽的什么风，有好好的教程不直接参考，反而另辟蹊径选择了Hugo，周围的人都没用过，可怜的我只能通过咀嚼百度上为数不多的文章来自己动手，幸运的是，我已经成功了~qwq
废话不多说，切入正题~
Hugo Hugo是一个用Go语言编写的静态网站生成器，很适合专心写博文不用管服务器的人用，如果你正想在GitHub上搭建个人静态博客，不妨试一试。
1.Hugo安装 直接上链接，我安装的是v0.49.2版本的。
下载完成后，开始安装，安装完成后，将Hugo添加到环境变量中，添加后，
cmd中查看版本信息，显示以下即安装成功：
$ hugo version Hugo Static Site Generator v0.49.2 windows/amd64  2.创建新网站 $ hugo new site myBlog  3.添加主题（以hugo-future-imperfect为例） $ cd myBlog/themes $ git clone https://github.com/jpescador/hugo-future-imperfect.git  当然你可以选择自己喜欢的博客主题，Hugo提供很多主题。
4.复制主题标准样式的配置文件及资源文件到对应路径下： $ cd ~/myBlog/themes/hugo-future-imperfect/exampleSite $ cp config.toml ~/myBlog/ $ cp -r static ~/myBlog/static $ cp -r content ~/myBlog/content  5.适当修改config.toml的内容，在/content/目录下添加新的.md文件可以发表新文章。 6.测试网站 $ hugo server  打开http://localhost:1313/查看修改后的网页内容。
7.发布网站
hugo --theme=hugo-future-imperfect --baseUrl=&amp;quot;https://yourname.github.io/&amp;quot;  此时，在~/myBlog目录下会创建一个public的文件夹，将此文件夹下的所有内容git push到github上的yourname.</description>
    </item>
    
  </channel>
</rss>